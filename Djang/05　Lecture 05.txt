
Lecture 05　前端表單整合(1)

--------------------------------------------------------------------------------

5-1　表單元件

#自行創建檔案
(blog/forms.py)

from django import forms


class PostForm(forms.Form):
    #html語法:<input type="text" maxlength=100>
    title=forms.CharField(max_length=100)
    text=forms.CharField(max_length=2000, widget=forms.Textarea())


--------------------------------------------------------------------------------

5-2　動態化templates

(blog/templates/blog/post_list.html)

<!DOCTYPE html>

<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Lynn's Page</title>
</head>

<body>
    <div>
    {% for post in posts%}
    <h2><a href="/blog{{post.id}}">{{post.title}}</a></h2>
    <p>{{post.text|linebreaks}}</p>
    <p>發布時間:{{post.created_date}}</p>
    {% endfor %}
    </div>

    <div>
    <h4>發布新文章:</h4>
　  <!--按下submit後，觸發action，並以post方式攜帶資訊-->
    <form action="/blog/add_record" method="post" accept-charset="utf-8">
    <table>
        <!--以{{xxx}}帶入動態參數，需在views.py定義-->
        {{post_form.as_table}}
    </table>
    <input type="submit" name="add_record" value="提交">
    </form>
    </div>
</body>
</html>


--------------------------------------------------------------------------------

5-3　views取動態參數

(blog/views.py)

from django.shortcuts import render
from .models import Post
#與posts邏輯相同，多接一個post_form物件的動態參數
from .forms import PostForm


def post_list(request):
　　posts=Post.objects.all().order_by('-created_date')
    #串聯資料庫，同時也取得文本框資訊: 呼叫forms.py檔之PostForm函式
    post_form=PostForm()
    return render(request, 'blog/post_list.html', {'posts': posts, 'post_form': post_form})


(terminal)

#啟動server，更改網址127.0.0.1:8000/blog/
python manage.py runserver 8000
(出現各篇post及一組發布文本框，代表post_list.html套用成功)


--------------------------------------------------------------------------------

5-4　小結

1.動態化MTV

  其實就是將templates挖洞，並在views.py加入動態的資訊接收({"posts"})，藉以串聯資料庫

2.前端表單整合

　(1)加入forms.py物件並置於templates當中，由views.py定義成為另一組需接收的動態資訊

　(2)差異在於posts取用資料庫現有內容，post_form既尚未寫入資料庫，更遑論被讀取、顯示

3.整合策略

　(1)add_record: 仿照post_list方法，定義submit後之資料寫入及頁面重導向

　(2)文本分頁讀取: 仿照post_list方法，定義文章分頁後之資料讀取及顯示
