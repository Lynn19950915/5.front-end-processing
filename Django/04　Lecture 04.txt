
Lecture 04　動態化MTV

--------------------------------------------------------------------------------

4-1　動態化概念

1.models.py: 定義Post類別

  透過model之創建、註冊，使用者可於管理介面(127.0.0.1:8000/admin/)寫入資料

  當資料寫入時將觸發Post，紀錄作者、標題、內容及時間等類別屬性

2.views.py: 提出資料庫query

  透過view之自訂函式，以request方法在前台頁面(127.0.0.1:8000/blog/)顯示html結構

  若將html設定為動態格式，則可由外部下(類SQL查詢)指令填入網頁架構


--------------------------------------------------------------------------------

4-2　動態化templates

#以posts代表(一系列)文章列表，製作動態資料填入
(blog/templates/blog/post_list.html)

<!DOCTYPE html>

<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Lynn's Page</title>
</head>

<body>
    <div>
    <!--以%for...endfor%，定義迴圈範圍-->
    {% for post in posts%}
    <!--以{{xxx}}帶入動態參數，埋一項id-->
    <h2><a href="/blog{{post.id}}">{{post.title}}</a></h2>
    <p>{{post.text|linebreaks}}</p>
    <p>發布時間:{{post.created_date}}</p>
    {% endfor %}
    </div>
</body>
</html>


--------------------------------------------------------------------------------

4-3　views取動態參數

(blog/views.py)

from django.shortcuts import render
from .models import Post


def post_list(request):
    #串聯資料庫取資料:符合查詢之結果，將成為一組posts列表[參考Appendix 1]
　  posts=Post.objects.all().order_by('-created_date')
    #{}負責接收丟入post_list.html中的動態參數
    return render(request, 'blog/post_list.html', {'posts':posts})


(terminal)

#啟動server，更改網址127.0.0.1:8000/blog/
python manage.py runserver 8000
(出現標題、內容及時間，代表post_list.html套用成功；可在127.0.0.1:8000/admin/新增一篇post測試)
